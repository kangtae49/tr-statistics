
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async runShell(shellJob: ShellJob) : Promise<Result<null, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("run_shell", { shellJob }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async stopShell(taskId: string) : Promise<Result<null, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("stop_shell", { taskId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSetting() : Promise<Result<Setting, ApiError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_setting") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type ApiError = { Error: string } | { TauriError: string } | { ReqwestError: string } | { Io: string } | { ParseError: string } | { JsonError: string } | { GlobError: string }
export type ArgType = "String"
export type ScriptArg = { arg_type: ArgType; name: string; description: string; default: string; required: boolean }
export type ScriptInfo = { name: string; description: string; shell_type: ShellType; script: string; args: ScriptArg[] }
export type Setting = { script_files: ScriptInfo[] }
export type ShellJob = { task_id: string; shell_type: ShellType; args: string[]; shell?: string | null; working_dir?: string | null; encoding?: string | null }
export type ShellType = "Cmd" | "Powershell" | "Python"

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
// This file has been generated by Specta. DO NOT EDIT.

export type TaskNotify = { task_id: string; task_status: TaskStatus; exit_code?: number | null; message: string }

export type TaskStatus = "Begin" | "Running" | "End" | "Stdout" | "Stderr"

